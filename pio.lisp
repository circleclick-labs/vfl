(declaim (ftype (function (t t) t) readd))
(declaim (ftype (function (t)   t) peekn))
(declaim (ftype (function (t)   t) peeks))
(declaim (ftype (function (t)   t) peekc))
(declaim (ftype (function (t)   t) readc))
(declaim (ftype (function (t)   t) readl))
(declaim (ftype (function (t)   t) peekw))
(defvar rt      *readtable*)
(defvar ct (copy-readtable))
(defun  identp (c) (if c (multiple-value-bind (a b)
			     (get-macro-character c) (if a b t))))
(defun  grabc  (c) (if c (set-macro-character c 'cb (:= *readtable* ct))) (^))
(defun  grabs  (s) (grabc (peekc s)))
(defun    cb (s c) (:= *readtable* rt) (unread-char c s) (readl s))
(defun readr (s)   (let* ((r  (readp s)))
		     (if (!=  (peekc s) #\( )         r  
			 (n   (readc s)           (^. r (readd s #\)))))))
(defun readx (s) (if     (== *readtable*  ct) (^)
		     (if (==  (peekw s) #\lf) (^) (^.   (readr s) (readx s)))))
(defun readz (s)     (if (identp   (peekc s))     (^.   (readc s) (readz s))))
(defun readi (s)     (intern (string-upcase (cs (readz s))) "KEYWORD"))
(defun readw (s)     (if (!=  (peekc s) #\sp) (^) (^.   (readc s) (readw s))))
(defun reads (s)     (if (!=  (peekw s) #\lf) (^) (^.   (readc s) (reads s))))
(defun readd (s c)   (if (!=  (peeks s)    c)     (^.   (readr s) (readd s c))
			 (n   (readc s)       (^))))
(defun readm (s x)   (if (!=  (peekn s)    x) (^)
			 (let ((r (readx s))) (if     r
						  (^. r (readm s x))))))
(defun peekw (s)                                        (readw s) (peekc s))
(defun peeks (s)                                        (reads s) (peekc s))
(defun peekn (s)                                        (reads s) (off   s))
(defun readl (s) (hc (let* ((o n) (r (readx s)) (s (shortname)))
		       (declare (ignorable o s))
		       (if r (f. "~a:~a:I: ~s"   s  o       r ))
		       ;;(if r (eval r))
		       (if r (f. "~a:~a:O: ~s"   s  o (eval r)))
		       (^)
		       ;;r
		       ) (end-of-file() (f. ""))))
(defun readb (s c) (declare (ignore c))
  (prog1 (readm s (peekn s)) (if (zerop (off s)) (grabs s))))
(defun read2 (s c)
  (if (member (peekc s) '(#\sp #\tab #\nl #\cr #\()) 
      (let* ((r (readb s c))) (case (length r)
				((0 1) (car        r))
				(t     (cons (q n) r))))
      (progn
	(print (readi s))
	(^))))
(defun readn (s c) (snl s c 1) (grabs s))
(defun readq (s c) (declare (ignore c)) (list   (q q)   (readr          s)))
(defun readh (s c) (declare (ignore c)) (read-line s) (unread-char #\lf s) (^))
(defun readf (f)   (grabs (open (cs f ".lisp"))) (load f))
(defun install-vfl ()
  (set-macro-character #\lf 'readn)
  (set-macro-character #\\  'readq)
  (set-macro-character #\/  'readb)
  (set-macro-character #\:  'read2)
  (set-macro-character #\;  'readh))
(defun launch-vfl (filename) (install-vfl) (readf filename) (quit))
