(declaim (ftype (function (t t) t) readd))
(defvar rt      *readtable*)
(defvar ct (copy-readtable))
(defun readw (s)     (if (!=  (peekc s) #\sp) (^) (^. (readc s) (readw s))))
(defun peekw (s)                                      (readw s) (peekc s))
(defun peekl (s)                                      (readw s) (peekc s))
(defun reads (s)     (if (!=  (peekw s) #\lf) (^) (^. (readc s) (reads s))))
(defun peeks (s)                                      (reads s) (peekc s))
(defun peekn (s)                                      (reads s) (off   s))
(defun readr (s)   (let* ((r  (readp s)))
		     (if (!=  (peekc s) #\( )          r
			 (n   (readc s)           (^.  r  (readd s #\)))))))
(defun readx (s) (if     (== *readtable*  ct) (^)
		     (if (==  (peekw s) #\lf) (^) (^. (readr s) (readx s)))))
(defun readm (s x)
  (f. "readm ~s ~s" x (peekn s))
  (if (!=  (peekn s)    x) (^)
      (progn
	(let ((r (readx s)))
	  (f. "read  ~s" r)
	  (if r
	      (cons r (readm s x)))))))
(defun readd (s c)   (if (!=  (peeks s)    c)     (^. (readr s) (readd s c))
			 #||#                     (^- (readc s))))
(defun readl (s)
  (hc (let* ((o n) (r (readx s)) (f (shortname)))
	(when r	(let* ((x (f. "~a:~a:I: ~s" f o r))
		       (e (eval r))
		       (y (f. "~a:~a:O: ~s" f o e)))
		  (declare (ignore x y)))))
      (end-of-file() (f. ""))))
(defun grab (s)
  (if (peekc s)
      (set-macro-character
       (peekc s)
       (lambda (s c) (setf *readtable* rt) (unread-char c s) (readl s))
       (setf *readtable* ct))))
(defun readb (s &optional c)
  (declare (ignore c))
  (f. "readb>>> ~s" (peekn s))
  (prog1 (readm s (peekn s))
    (if (zerop (off s))
	(grab s))
  (f. "readb<<<")))
(defun readb2 (s &optional c)
  (let* ((r (readb s c)))
    (case (length r)
      ((0 1) (car r))
      (t     (cons 'progn r)))))
(defun readn (s c) (snl s c 1) (grab s) (values))
(defun readq (s c) (declare (ignore c)) (list 'quote (readr s)))
(defun launch-vfl (filename)
  (set-macro-character #\lf 'readn)
  (set-macro-character #\\  'readq)
  (set-macro-character #\/  'readb)
  (set-macro-character #\:  'readb2)
  (load filename)
  (quit))
